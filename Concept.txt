// code
{
	Data_Type var = value // Initialization
	// class name {}; // For later
	// Inside body
	{
		while (expression) {code}
		if (expression) {code}
		for (Initialization; expression; operation) {code}
	}
	// Outside body
	{		
		Data_Type func(params) {code}
	}
}

//
	hello 	= 	2.0 , "hello" , true , null // variable = data type , data type , data type , nullopt 
	^^^^^   ^   ^^^   ^^^^^^^   ^^^^   ^^^^	
{  "hello","=","2.0",""hello"","true","null" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	hello[1] **(	hello 	at 		1)** = 		"This" // variable index = data type 
	^^^^^^^^		^^^^^	^^		^	 ^		 ^^^^
{ ("hello[1]") OR ("hello","at",   "1"),"=",   ""This"" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if 		hello 	at 		1 	equal 	"This" 		println 	"Horray!!!" // keyword expression code
	^^		^^^^^	^^		^	^^^^^	^^^^^^		^^^^^^^		^^^^^^^^^^^
{  "if",   "hello","at",   "1","equal",""This"",   "println",  ""Hooray!!!"" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	elf 	hello 	at 		0 	equal 	2.0 	println 	"Also good" // keyword expression code 
	^^^		^^^^^	^^		^	^^^^^	^^^		^^^^^^^		^^^^^^^^^^^
{  "elf",  "hello","at",   "0","equal","2,0",  "println",  ""Also good"" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else 	println 	"Sad" // keyword code 
	^^^^	^^^^^^^		 ^^^
{  "else", "println",   "Sad" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//


	 if   hello equal "hello" println hello
	 ^^   ^^^^^ ^^^^^ ^^^^^^^ ^^^^^^^ ^^^^^
keyword |	  expression     |	  code
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
				code

expression could be:
		variable operator variable
		variable operator constant
		constant operator varaible
		constant operator constant
		boolean variable
		boolean constant

variables could be:
		variable name (where the first element will be picked)
		variable indexed (where the element indexed will be picked [0-index method])
		function return (will be though of later lol)

constants could be:
		DataType values (True or False / integral values / decimal values / string / null)

keywords could be:
		A word reserved for a function
		A word reserved for a DataType value (True or False / null)
<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>
When creating a variable we go

[variable name] = val1 val2 val3		OR
[variable name] = [variable name]
<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>
When creating a print statement we go
print(ln) val1 val2 val3
print(ln) [variable name]
<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>-<=>
When setting a variable we go

[variable name]([[index]]) (at [index]) = val		OR
[variable name] = val1 val2 val3

// First one only accounts for one variable, second accounts for multiple