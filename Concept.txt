// code
{
	Data_Type var = value // Initialization
	// class name {}; // For later
	// Inside body
	{
		while (expression) {code}
		if (expression) {code}
		for (Initialization; expression; operation) {code}
	}
	// Outside body
	{		
		Data_Type func(params) {code}
	}
}

//
	hello 	= 	2.0 , "hello" , true , null // variable = data type , data type , data type , nullopt 
	^^^^^   ^   ^^^   ^^^^^^^   ^^^^   ^^^^	
{  "hello","=","2.0",""hello"","true","null" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	hello[1] **(	hello 	at 		1)** = 		"This" // variable index = data type 
	^^^^^^^^		^^^^^	^^		^	 ^		 ^^^^
{ ("hello[1]") OR ("hello","at",   "1"),"=",   ""This"" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	if 		hello 	at 		1 	equal 	"This" 		println 	"Horray!!!" // keyword expression code
	^^		^^^^^	^^		^	^^^^^	^^^^^^		^^^^^^^		^^^^^^^^^^^
{  "if",   "hello","at",   "1","equal",""This"",   "println",  ""Hooray!!!"" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	elf 	hello 	at 		0 	equal 	2.0 	println 	"Also good" // keyword expression code 
	^^^		^^^^^	^^		^	^^^^^	^^^		^^^^^^^		^^^^^^^^^^^
{  "elf",  "hello","at",   "0","equal","2,0",  "println",  ""Also good"" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else 	println 	"Sad" // keyword code 
	^^^^	^^^^^^^		 ^^^
{  "else", "println",   "Sad" }
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//